@page "/blazor/usage"
@using UsageMonitor.Core.Services
@using UsageMonitor.Core.Models
@inject IUsageMonitorService UsageService

<div class="container py-4">
    <div class="card shadow-sm">
        <div class="card-body">
            <h5 class="card-title">API Usage</h5>
            @if (usage != null)
            {
                <div class="progress mb-3">
                    <div class="progress-bar @(usagePercentage > 90 ? "bg-danger" : "")" role="progressbar"
                        style="width: @(usagePercentage)%">
                    </div>
                </div>
                <p class="mb-0">@usage.Value.count requests this month</p>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
    </div>

    <div class="card shadow-sm mt-4">
        <div class="card-body">
            <h5 class="card-title">Recent Requests</h5>
            @if (logs != null)
            {
                <div class="table-responsive">
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Time</th>
                                <th>Status</th>
                                <th>Duration</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var log in logs)

                            {
                                <tr>
                                    <td>@log.RequestTime.ToLocalTime()</td>
                                    <td>
                                        <span class="badge @(log.StatusCode < 400 ? "bg-success" : "bg-danger")">
                                            @log.StatusCode
                                        </span>
                                    </td>
                                    <td>@log.Duration.ToString("F2")s</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <p>Loading...</p>
            }
        </div>
    </div>
</div>

@code {
    private (int count, int limit)? usage;

    private IEnumerable<RequestLog>? logs;

    private double usagePercentage => usage?.count * 100.0 / usage?.limit ?? 0;



    protected override async Task OnInitializedAsync()

    {

        await LoadData();

    }



    private async Task LoadData()

    {

        var client = await UsageService.GetApiClientAsync();

        if (client != null)

        {

            var count = await UsageService.GetTotalRequestCountAsync();

            usage = (count, client.UsageLimit);

        }



        var (recentLogs, _) = await UsageService.GetPaginatedLogsAsync(pageSize: 10);

        logs = recentLogs;

    }
}
